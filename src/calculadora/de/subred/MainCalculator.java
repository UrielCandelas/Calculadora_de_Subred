/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package calculadora.de.subred;

import javax.swing.JOptionPane;

/**
 *
 * @author UrielC
 */
public class MainCalculator extends javax.swing.JFrame {

    /**
     * Creates new form MainCalculator
     */
    public MainCalculator() {
        initComponents();
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        oct1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cidrValue = new javax.swing.JTextField();
        oct2 = new javax.swing.JTextField();
        oct3 = new javax.swing.JTextField();
        oct4 = new javax.swing.JTextField();
        subnetMask = new javax.swing.JTextField();
        networkAddress = new javax.swing.JTextField();
        broadcastAddress = new javax.swing.JTextField();
        noSubnets = new javax.swing.JTextField();
        hostsPSubnet = new javax.swing.JTextField();
        networkClass = new javax.swing.JTextField();
        binaryIP = new javax.swing.JTextField();
        subnetMaskBinary = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Calculadora de Subred");

        oct1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oct1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Direccion IP");

        jLabel3.setText("Valores CIDR  /");

        cidrValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cidrValueActionPerformed(evt);
            }
        });

        oct2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oct2ActionPerformed(evt);
            }
        });

        oct3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oct3ActionPerformed(evt);
            }
        });

        oct4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oct4ActionPerformed(evt);
            }
        });

        subnetMask.setEditable(false);

        networkAddress.setEditable(false);

        broadcastAddress.setEditable(false);

        noSubnets.setEditable(false);
        noSubnets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noSubnetsActionPerformed(evt);
            }
        });

        hostsPSubnet.setEditable(false);
        hostsPSubnet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostsPSubnetActionPerformed(evt);
            }
        });

        networkClass.setEditable(false);

        binaryIP.setEditable(false);
        binaryIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryIPActionPerformed(evt);
            }
        });

        subnetMaskBinary.setEditable(false);
        subnetMaskBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subnetMaskBinaryActionPerformed(evt);
            }
        });

        jLabel4.setText("Mascara de Subred");

        jLabel5.setText("Direccion de Red");

        jLabel6.setText("Direccion de Difusion");

        jLabel7.setText("Numero de Subredes");

        jLabel8.setText("Host por Subred");

        jLabel9.setText("Direccion IP(Binario)");

        jLabel10.setText("Mascara de Subred(Binario)");

        jLabel11.setText("Calse de red");

        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(networkAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(oct1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(oct2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(oct3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(oct4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(162, 162, 162)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cidrValue, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(hostsPSubnet, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66)
                                .addComponent(jButton1)))
                        .addGap(94, 94, 94))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(subnetMask, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(113, 113, 113)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(networkClass, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(binaryIP, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(noSubnets, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(broadcastAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2)
                                .addGap(134, 134, 134))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(subnetMaskBinary)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oct1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(cidrValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(oct2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(oct3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(oct4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subnetMask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(networkClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(networkAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(broadcastAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subnetMaskBinary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noSubnets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostsPSubnet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(binaryIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void oct1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oct1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oct1ActionPerformed

    private void cidrValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cidrValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cidrValueActionPerformed

    private void oct2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oct2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oct2ActionPerformed

    private void oct3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oct3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oct3ActionPerformed

    private void oct4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oct4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oct4ActionPerformed

    private void hostsPSubnetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostsPSubnetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hostsPSubnetActionPerformed

    private void binaryIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_binaryIPActionPerformed

    private void subnetMaskBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subnetMaskBinaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subnetMaskBinaryActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (!oct1.getText().equals("") && !oct2.getText().equals("") && !oct3.getText().equals("") && !oct4.getText().equals("") && !cidrValue.getText().equals("")) {
            try {
                int oct1v = Integer.parseInt(oct1.getText().toString());
                int oct2v = Integer.parseInt(oct2.getText().toString());
                int oct3v = Integer.parseInt(oct3.getText().toString());
                int oct4v = Integer.parseInt(oct4.getText().toString());

                int cidrv = Integer.parseInt(cidrValue.getText().toString());
                String oct1Bin = String.format("%8s", Integer.toBinaryString(oct1v)).replace(' ', '0');
                String oct2Bin = String.format("%8s", Integer.toBinaryString(oct2v)).replace(' ', '0');
                String oct3Bin = String.format("%8s", Integer.toBinaryString(oct3v)).replace(' ', '0');
                String oct4Bin = String.format("%8s", Integer.toBinaryString(oct4v)).replace(' ', '0');

                String direccionIPBinaria = oct1Bin + "." + oct2Bin + "." + oct3Bin + "." + oct4Bin;

                binaryIP.setText(direccionIPBinaria);

                switch (cidrv) {
                    case 1:
                        subnetMask.setText("128.0.0.0");
                        break;
                    case 2:
                        subnetMask.setText("192.0.0.0");
                        break;
                    case 3:
                        subnetMask.setText("224.0.0.0");
                        break;
                    case 4:
                        subnetMask.setText("240.0.0.0");
                        break;
                    case 5:
                        subnetMask.setText("248.0.0.0");
                        break;
                    case 6:
                        subnetMask.setText("252.0.0.0");
                        break;
                    case 7:
                        subnetMask.setText("254.0.0.0");
                        break;
                    case 8:
                        subnetMask.setText("255.0.0.0");
                        break;
                    case 9:
                        subnetMask.setText("255.128.0.0");
                        break;
                    case 10:
                        subnetMask.setText("255.192.0.0");
                        break;
                    case 11:
                        subnetMask.setText("255.224.0.0");
                        break;
                    case 12:
                        subnetMask.setText("255.240.0.0");
                        break;
                    case 13:
                        subnetMask.setText("255.248.0.0");
                        break;
                    case 14:
                        subnetMask.setText("255.252.0.0");
                        break;
                    case 15:
                        subnetMask.setText("255.254.0.0");
                        break;
                    case 16:
                        subnetMask.setText("255.255.0.0");
                        break;
                    case 17:
                        subnetMask.setText("255.255.128.0");
                        break;
                    case 18:
                        subnetMask.setText("255.255.192.0");
                        break;
                    case 19:
                        subnetMask.setText("255.255.224.0");
                        break;
                    case 20:
                        subnetMask.setText("255.255.240.0");
                        break;
                    case 21:
                        subnetMask.setText("255.255.248.0");
                        break;
                    case 22:
                        subnetMask.setText("255.255.252.0");
                        break;
                    case 23:
                        subnetMask.setText("255.255.254.0");
                        break;
                    case 24:
                        subnetMask.setText("255.255.255.0");
                        break;
                    case 25:
                        subnetMask.setText("255.255.255.128");
                        break;
                    case 26:
                        subnetMask.setText("255.255.255.192");
                        break;
                    case 27:
                        subnetMask.setText("255.255.255.224");
                        break;
                    case 28:
                        subnetMask.setText("255.255.255.240");
                        break;
                    case 29:
                        subnetMask.setText("255.255.255.248");
                        break;
                    case 30:
                        subnetMask.setText("255.255.255.252");
                        break;
                    case 31:
                        subnetMask.setText("255.255.255.254");
                        break;
                    case 32:
                        subnetMask.setText("255.255.255.255");
                        break;

                    default:
                        cidrValue.setText("Invalido");
                }
                if (oct1v >= 0 && oct1v <= 127) {
                    networkClass.setText("A");
                    networkAddress.setText(oct1.getText() + ".0.0.0");
                    int m;

                }
                if (oct1v >= 128 && oct1v <= 191) {
                    networkClass.setText("B");
                    networkAddress.setText(oct1.getText() + "." + oct2.getText() + ".0.0");
                }
                if (oct1v >= 192 && oct1v <= 223) {
                    networkClass.setText("C");
                    networkAddress.setText(oct1.getText() + "." + oct2.getText() + "." + oct3.getText() + ".0");
                }
                if (oct1v >= 224 && oct1v <= 239) {
                    networkClass.setText("D");
                }
                if (oct1v >= 240 && oct1v <= 255) {
                    networkClass.setText("E");
                }

                broadcastAddress.setText(oct1.getText() + "." + oct2.getText() + "." + oct3.getText() + ".255");

                int value = 32 - Integer.parseInt(cidrValue.getText());
                int outPut = (int) Math.pow(2, value);
                hostsPSubnet.setText("" + outPut);

                int subnets = Integer.parseInt(hostsPSubnet.getText()) / Integer.parseInt(cidrValue.getText());

                try {
    int cidrv2 = Integer.parseInt(cidrValue.getText());

    // Calcular la máscara de subred
    int subnetMask = 0xFFFFFFFF << (32 - cidrv2);

    // Convertir la máscara de subred a representación binaria
    String binarySubnetMask = Integer.toBinaryString(subnetMask);
    binarySubnetMask = String.format("%32s", binarySubnetMask).replace(' ', '0');

    // Insertar un punto cada 8 espacios
    StringBuilder formattedBinarySubnetMask = new StringBuilder();
    for (int i = 0; i < binarySubnetMask.length(); i++) {
        if (i > 0 && i % 8 == 0) {
            formattedBinarySubnetMask.append('.');
        }
        formattedBinarySubnetMask.append(binarySubnetMask.charAt(i));
    }

    // Establecer la máscara de subred en formato binario con puntos
    subnetMaskBinary.setText(formattedBinarySubnetMask.toString());

    // Resto del código...
} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
}


            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Ingrese valores validos");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Ingrese un valor IP y un CIDR");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        oct1.setText("");
        oct2.setText("");
        oct3.setText("");
        oct4.setText("");
        cidrValue.setText("");
        subnetMask.setText("");
        networkAddress.setText("");
        broadcastAddress.setText("");
        noSubnets.setText("");
        hostsPSubnet.setText("");
        networkClass.setText("");
        binaryIP.setText("");
        subnetMaskBinary.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void noSubnetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noSubnetsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noSubnetsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField binaryIP;
    private javax.swing.JTextField broadcastAddress;
    private javax.swing.JTextField cidrValue;
    private javax.swing.JTextField hostsPSubnet;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField networkAddress;
    private javax.swing.JTextField networkClass;
    private javax.swing.JTextField noSubnets;
    private javax.swing.JTextField oct1;
    private javax.swing.JTextField oct2;
    private javax.swing.JTextField oct3;
    private javax.swing.JTextField oct4;
    private javax.swing.JTextField subnetMask;
    private javax.swing.JTextField subnetMaskBinary;
    // End of variables declaration//GEN-END:variables
}
